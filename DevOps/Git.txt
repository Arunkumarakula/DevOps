               * Git *



* Why we need a Version Control System (VCS)?

    - Collaboration

    - Storing versions

    - Figuring out what happened

    - Backup




* What is VCS?
  Version control is a system that documents changes made to a file or a set of files.It allows multiple users to manage multiple reversions of the same unit of information.It is a      snapshot of your project over time.



* Types...!

1. Local Version Control (LVC):

     - The practice of having the version database in the local computer.

     - The local database keeps a record of the changes made to files in the version database.


 Drawbacks:

 Issue: Multiple people working parallelly on the same project.

 Solution: CVC (Centralized Version Control).



2. Centralized Version Control (CVC):

     - Local Version Control's issues are resolved by CVC.

     - In CVC, a central repository is maintained where all the versioned files are kept.

     - Now users can check out and check in files from to their different consoles at any time.


 Issue: In case the central server fails, the whole system goes down.

 Solution: DVCS (Distributed Version Control System).





3. Distributed Version Control (DVCS): (Remote Server)

     - The version database is stored at every user's local system and the remote server.

     - Users manipulate the local files and then upload the changes to the remote server.

     - If any of the servers die, a client server can be used to restore.





* What is Git?
  Git is an open-source distributed version control system (DVCS) that records changes made to the files, laying emphasis on speed, data integrity, and distributed, non-linear workflows.



* Git File Workflow *

 Remote Repository: The server where the collaborators upload changes made to the files.



1. Git Local Repository $ Remote Repository:

  - A local repository is a user’s copy of the version database.

  - The user accesses all the files through the local repository and then pushes the changes made to the remote repository.



2. Workspace:

  - It is a user’s active directory where they create new files.

  - In this space, Git tracks changes compared to your local repository.



3. Stage:

  - A place where all the modified files marked to be committed are placed.




4. Clone:

   - The clone command creates a copy of an existing remote repository inside the local repository.



5. Commit:

  - The commit command commits all the files in the staging area to the local repository.



6. Push:

  - The push command pushes all the changes made in the local repository to the remote repository.



7. Fetch:

  - The fetch command collects the changes made in the remote repository and copies them to the local repository.

  - This command doesn’t affect your workspace.



8. Pull:

  - The pull command, like fetch, gets all the changes from the remote repository and copies them to the local repository.

  - Pull merges those changes into the current working directory.


